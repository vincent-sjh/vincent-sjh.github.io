<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://vincent-sjh.github.io/homepage/index.html/</id><title>宋建昊</title><subtitle>SJB could fly!</subtitle> <updated>2025-10-24T15:30:14+00:00</updated> <author> <name>Vincent</name> <uri>https://vincent-sjh.github.io/homepage/index.html/</uri> </author><link rel="self" type="application/atom+xml" href="https://vincent-sjh.github.io/homepage/index.html/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://vincent-sjh.github.io/homepage/index.html/"/> <generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator> <rights> © 2025 Vincent </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>How can we see a web page? | Vincent's Technical Reports (Vol. 5)</title><link href="https://vincent-sjh.github.io/homepage/index.html/posts/Web-Page/" rel="alternate" type="text/html" title="How can we see a web page? | Vincent's Technical Reports (Vol. 5)" /><published>2025-08-12T16:30:00+00:00</published> <updated>2025-08-13T08:26:15+00:00</updated> <id>https://vincent-sjh.github.io/homepage/index.html/posts/Web-Page/</id> <content src="https://vincent-sjh.github.io/homepage/index.html/posts/Web-Page/" /> <author> <name>宋建昊</name> </author> <category term="Vincent's Technical Reports" /> <summary> 摘要 当用户在浏览器地址栏输入URL并按下回车键时，一个复杂的网络通信过程随即启动。本文将系统性地分析从URL解析到网页完整渲染的全过程，深入剖析协议栈各层的协同工作机制，呈现现代互联网通信的技术架构。 1 应用层协议与资源定位 1.1 URL 统一资源定位符（Uniform Resource Locator, URL）是互联网资源的标准寻址方案。标准语法结构如下： scheme://[userinfo@]host[:port]/path[?query][#fragment] https://www.example.com:1211/index.html?k1=v1&amp;amp;k2=v2 核心组件分析： 协议标识符（Scheme）：定义应用层协议类型，常见协议包括HTTP（HyperText Transfer Protocol）、HTTPS（HTTP Secur... </summary> </entry> <entry><title>AI Detector &amp; Humanizer | Vincent's Technical Reports (Vol. 4)</title><link href="https://vincent-sjh.github.io/homepage/index.html/posts/AI-Detector-Humanizer/" rel="alternate" type="text/html" title="AI Detector &amp; Humanizer | Vincent's Technical Reports (Vol. 4)" /><published>2025-08-11T16:30:00+00:00</published> <updated>2025-08-12T09:06:46+00:00</updated> <id>https://vincent-sjh.github.io/homepage/index.html/posts/AI-Detector-Humanizer/</id> <content src="https://vincent-sjh.github.io/homepage/index.html/posts/AI-Detector-Humanizer/" /> <author> <name>宋建昊</name> </author> <category term="Vincent's Technical Reports" /> <summary> AI Detector V.S. Humanizer 简介 人工智能时代，人们越来越多地使用AI工具完成任务，当AI生成的内容越来越多时，AI检测工具和AI降重工具便应运而生。本次实验希望粗略地测试当前AI检查工具和AI降重工具的效果，选取了当前8个AI降重工具和3个AI检测工具，首先使用当前5款主流大模型生成风格和主题不同的英文文本，比较AI降重后的AI重复率，有趣的是，我还额外从新闻网站选取了一段人类文本作为对照组进行实验。 Claude The emergence of digital technologies has fundamentally transformed existing patterns of social stratification, creating new forms of inequality while simultaneously rei... </summary> </entry> <entry><title>RSA &amp; SSH | Vincent's Technical Reports (Vol. 3)</title><link href="https://vincent-sjh.github.io/homepage/index.html/posts/RSA-SSH/" rel="alternate" type="text/html" title="RSA &amp; SSH | Vincent's Technical Reports (Vol. 3)" /><published>2025-07-26T16:30:00+00:00</published> <updated>2025-08-13T05:10:48+00:00</updated> <id>https://vincent-sjh.github.io/homepage/index.html/posts/RSA-SSH/</id> <content src="https://vincent-sjh.github.io/homepage/index.html/posts/RSA-SSH/" /> <author> <name>宋建昊</name> </author> <category term="Vincent's Technical Reports" /> <summary> RSA and SSH RSA加密算法详解 简介 RSA加密算法是1977年由Ron Rivest、Adi Shamir和Leonard Adleman共同提出的一种非对称加密算法，算法名称取自三位发明者姓氏的首字母。RSA是目前应用最广泛的公钥密码体制，广泛用于数字签名、密钥交换和数据加密等领域。 非对称加密是指加密者与解密者使用的是不同的密钥，反之对称加密是指加密者和解密者使用相同的密钥。对称加密要求加密者和解密者共同事先约定好密钥，但在网络上进行这个过程保证不泄密存在一定难度，这就是选择非对称加密的原因。 RSA算法的安全性基于大整数分解的困难性，即对于两个大素数的乘积，要分解出这两个素数在计算上是困难的。 算法原理 密钥生成 RSA密钥生成过程包括以下步骤： 选择两个大素数 p 和 q，通常长度为512位或更长。 计算模数 n = p × q 计算... </summary> </entry> <entry><title>Productivity Tool Recommendations | Workflow Wizards (Vol. 1)</title><link href="https://vincent-sjh.github.io/homepage/index.html/posts/AI-IDE/" rel="alternate" type="text/html" title="Productivity Tool Recommendations | Workflow Wizards (Vol. 1)" /><published>2025-07-04T16:30:00+00:00</published> <updated>2025-09-11T09:15:17+00:00</updated> <id>https://vincent-sjh.github.io/homepage/index.html/posts/AI-IDE/</id> <content src="https://vincent-sjh.github.io/homepage/index.html/posts/AI-IDE/" /> <author> <name>宋建昊</name> </author> <category term="Workflow Wizards" /> <summary> 生成式语言大模型 AI for Coding Sourcegraph Sourcegraph 是一个 AI 驱动的代码智能平台，专注于代码搜索和分析，帮助开发者快速理解和维护复杂代码库。它提供 Cody（AI 助手）用于代码补全和问题解答，支持批量代码更改和跨仓库搜索。Sourcegraph 与 GitHub 和 GitLab 集成，适合团队协作和开源项目管理，特别适用于需要快速导航大型代码库的开发者。 Tabnine Tabnine 是一个 AI 代码助手，可集成到 PyCharm、VS Code 和 CLion 等 IDE，提供基于代码库上下文的智能代码补全和生成。它支持多种语言，包括 C++、Python 和 JavaScript，能够根据项目习惯提供个性化建议。Tabnine 强调数据安全，提供本地部署选项，适合需要高效编码和隐私保护的个人开发者或企业团队... </summary> </entry> <entry><title>Ocaml(1) | Vincent's Technical Reports (Vol. 2)</title><link href="https://vincent-sjh.github.io/homepage/index.html/posts/Ocaml-1/" rel="alternate" type="text/html" title="Ocaml(1) | Vincent's Technical Reports (Vol. 2)" /><published>2025-07-03T16:30:00+00:00</published> <updated>2025-08-12T08:47:35+00:00</updated> <id>https://vincent-sjh.github.io/homepage/index.html/posts/Ocaml-1/</id> <content src="https://vincent-sjh.github.io/homepage/index.html/posts/Ocaml-1/" /> <author> <name>宋建昊</name> </author> <category term="Vincent's Technical Reports" /> <summary> Ocaml编程语言初探 简介 OCaml (Objective Caml)是一种功能强大、兼具函数式、命令式和面向对象编程特性的通用编程语言。它由 INRIA(法国国家信息与自动化研究所)开发，最初设计于 1980 年代，是 Caml (Categorical Abstract Machine Language)语言的扩展版本，而 Caml 是 ML(Meta Language)语言家族的一员。ML 语言起源于 1970 年代的 Edinburgh LCF 项目，旨在为形式化证明系统提供编程支持。OCaml专注于函数式编程，以其类型安全、性能高效和表达力强等特点，在学术研究、工业开发和教学领域广受欢迎。 特性 强静态类型系统 OCaml采用静态类型检查，无需显式声明类型，编译器通过类型推导自动推断变量类型。 类型系统非常严格，防止运行时类型错误。例如： le... </summary> </entry> </feed>
